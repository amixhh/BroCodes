"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/y-codemirror";
exports.ids = ["vendor-chunks/y-codemirror"];
exports.modules = {

/***/ "(ssr)/./node_modules/y-codemirror/src/y-codemirror.js":
/*!*******************************************************!*\
  !*** ./node_modules/y-codemirror/src/y-codemirror.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeMirrorBinding: () => (/* binding */ CodeMirrorBinding),\n/* harmony export */   CodemirrorBinding: () => (/* binding */ CodemirrorBinding),\n/* harmony export */   cmOrigin: () => (/* binding */ cmOrigin)\n/* harmony export */ });\n/* harmony import */ var lib0_mutex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lib0/mutex */ \"(ssr)/./node_modules/lib0/mutex.js\");\n/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/math */ \"(ssr)/./node_modules/lib0/math.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var lib0_function__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lib0/function */ \"(ssr)/./node_modules/lib0/function.js\");\n/* harmony import */ var lib0_eventloop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lib0/eventloop */ \"(ssr)/./node_modules/lib0/eventloop.js\");\n/* harmony import */ var lib0_observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/observable */ \"(ssr)/./node_modules/lib0/observable.js\");\n/* harmony import */ var lib0_diff__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/diff */ \"(ssr)/./node_modules/lib0/diff.js\");\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror */ \"(ssr)/./node_modules/codemirror/lib/codemirror.js\");\n/**\n * @module bindings/textarea\n */\n\n\n\n\n\n\n\n\n\n\nconst cmOrigin = 'y-codemirror'\n\n/**\n * @param {CodemirrorBinding} binding\n * @param {any} event\n */\nconst typeObserver = (binding, event) => {\n  binding._mux(() => {\n    const cmDoc = binding.cmDoc\n    const cm = cmDoc.getEditor()\n    // Normally the position is right-associated\n    // But when remote changes happen, it looks like the remote user is hijacking your position.\n    // Just for remote insertions, we make the collapsed cursor left-associated.\n    // If selection is not collapsed, we only make \"to\" left associated\n    let anchor = cm.indexFromPos(cm.getCursor('anchor'))\n    let head = cm.indexFromPos(cm.getCursor('head'))\n    const switchSel = head < anchor\n    // normalize selection so that anchor < head, switch back later\n    if (switchSel) {\n      const tmp = head\n      head = anchor\n      anchor = tmp\n    }\n    const performChange = () => {\n      const delta = event.delta\n      let index = 0\n      for (let i = 0; i < event.delta.length; i++) {\n        const d = delta[i]\n        if (d.retain) {\n          index += d.retain\n        } else if (d.insert) {\n          if (index < anchor || (anchor < head && index === anchor)) {\n            anchor += d.insert.length\n          }\n          if (index < head) {\n            head += d.insert.length\n          }\n          const pos = cmDoc.posFromIndex(index)\n          cmDoc.replaceRange(d.insert, pos, pos, cmOrigin)\n          index += d.insert.length\n        } else if (d.delete) {\n          if (index < anchor) {\n            anchor = lib0_math__WEBPACK_IMPORTED_MODULE_1__.max(anchor - d.delete, index)\n          }\n          if (index < head) {\n            head = lib0_math__WEBPACK_IMPORTED_MODULE_1__.max(head - d.delete, index)\n          }\n          const start = cmDoc.posFromIndex(index)\n          const end = cmDoc.posFromIndex(index + d.delete)\n          cmDoc.replaceRange('', start, end, cmOrigin)\n        }\n      }\n    }\n    // if possible, bundle the changes using cm.operation\n    if (cm) {\n      cm.operation(performChange)\n    } else {\n      performChange()\n    }\n    if (switchSel) {\n      const tmp = head\n      head = anchor\n      anchor = tmp\n    }\n    cm.setSelection(cm.posFromIndex(anchor), cm.posFromIndex(head), { scroll: false })\n  })\n}\n\n/**\n * @param {CodemirrorBinding} binding\n * @param {Array<any>} changes\n */\nconst targetObserver = (binding, changes) => {\n  binding._mux(() => {\n    binding.doc.transact(() => {\n      const hasPaste = binding.yUndoManager && changes.some(change => change.origin === 'paste')\n      if (hasPaste) {\n        binding.yUndoManager.stopCapturing()\n      }\n\n      if (changes.length > 1) {\n        // If there are several consecutive changes, we can't reliably compute the positions anymore. See y-codemirror#11\n        // Instead, we will compute the diff and apply the changes\n        const d = lib0_diff__WEBPACK_IMPORTED_MODULE_2__.simpleDiffString(binding.type.toString(), binding.cmDoc.getValue())\n        binding.type.delete(d.index, d.remove)\n        binding.type.insert(d.index, d.insert)\n      } else {\n        const change = changes[0]\n        const start = binding.cmDoc.indexFromPos(change.from)\n        const delLen = change.removed.map(s => s.length).reduce(lib0_math__WEBPACK_IMPORTED_MODULE_1__.add) + change.removed.length - 1\n        if (delLen > 0) {\n          binding.type.delete(start, delLen)\n        }\n        if (change.text.length > 0) {\n          binding.type.insert(start, change.text.join('\\n'))\n        }\n      }\n\n      if (hasPaste) {\n        binding.yUndoManager.stopCapturing()\n      }\n    }, binding)\n  })\n  if (binding._pendingCursorEvent) {\n    binding._pendingCursorEvent = false\n    binding.emit('cursorActivity', [binding])\n  }\n}\n\nconst createRemoteCaret = (username, color) => {\n  const caret = document.createElement('span')\n  caret.classList.add('remote-caret')\n  caret.setAttribute('style', `border-color: ${color}`)\n  const userDiv = document.createElement('div')\n  userDiv.setAttribute('style', `background-color: ${color}`)\n  userDiv.insertBefore(document.createTextNode(username), null)\n  caret.insertBefore(userDiv, null)\n  setTimeout(() => {\n    caret.classList.add('hide-name')\n  }, 2000)\n  return caret\n}\n\nconst createEmptyLinePlaceholder = (color) => {\n  const placeholder = document.createElement('span')\n  placeholder.setAttribute('style', 'user-select: none;')\n  const emptyTxt = document.createElement('span')\n  emptyTxt.insertBefore(document.createTextNode(''), null)\n  const sel = document.createElement('span')\n  sel.setAttribute('class', 'y-line-selection')\n  sel.setAttribute('style', `display: inline-block; position: absolute; left: 4px; right: 4px; top: 0; bottom: 0; background-color: ${color}70`)\n  placeholder.insertBefore(sel, null)\n  placeholder.insertBefore(emptyTxt, null)\n  return placeholder\n}\n\nconst updateRemoteSelection = (y, cm, type, cursors, clientId, awareness) => {\n  // redraw caret and selection for clientId\n  const aw = awareness.getStates().get(clientId)\n  // destroy current text mark\n  const m = cursors.get(clientId)\n  if (m !== undefined) {\n    if (m.caret) {\n      m.caret.clear()\n    }\n    m.sel.forEach(sel => sel.clear())\n    cursors.delete(clientId)\n  }\n  if (aw === undefined) {\n    return\n  }\n  const user = aw.user || {}\n  if (user.color == null) {\n    user.color = '#ffa500'\n  }\n  if (user.name == null) {\n    user.name = `User: ${clientId}`\n  }\n  const cursor = aw.cursor\n  if (cursor == null || cursor.anchor == null || cursor.head == null) {\n    return\n  }\n  const anchor = yjs__WEBPACK_IMPORTED_MODULE_3__.createAbsolutePositionFromRelativePosition(JSON.parse(cursor.anchor), y)\n  const head = yjs__WEBPACK_IMPORTED_MODULE_3__.createAbsolutePositionFromRelativePosition(JSON.parse(cursor.head), y)\n  if (anchor !== null && head !== null && anchor.type === type && head.type === type) {\n    const headpos = cm.posFromIndex(head.index)\n    const anchorpos = cm.posFromIndex(anchor.index)\n    let from, to\n    if (head.index < anchor.index) {\n      from = headpos\n      to = anchorpos\n    } else {\n      from = anchorpos\n      to = headpos\n    }\n    const caretEl = createRemoteCaret(user.name, user.color)\n    // if position was \"relatively\" the same, do not show name again and hide instead\n    if (m && lib0_function__WEBPACK_IMPORTED_MODULE_4__.equalityFlat(aw.cursor.anchor, m.awCursor.anchor) && lib0_function__WEBPACK_IMPORTED_MODULE_4__.equalityFlat(aw.cursor.head, m.awCursor.head)) {\n      caretEl.classList.add('hide-name')\n    }\n    const sel = []\n\n    if (head.index !== anchor.index) {\n      if (from.line !== to.line && from.ch !== 0) {\n        // start of selection will only be a simple text-selection\n        sel.push(cm.markText(from, new codemirror__WEBPACK_IMPORTED_MODULE_0__.Pos(from.line + 1, 0), { css: `background-color: ${user.color}70;`, inclusiveRight: false, inclusiveLeft: false }))\n        from = new codemirror__WEBPACK_IMPORTED_MODULE_0__.Pos(from.line + 1, 0)\n      }\n      while (from.line !== to.line) {\n        // middle of selection is always a whole-line selection. We add a widget at the first position which will fill the background.\n        sel.push(cm.setBookmark(new codemirror__WEBPACK_IMPORTED_MODULE_0__.Pos(from.line, 0), { widget: createEmptyLinePlaceholder(user.color) }))\n        from = new codemirror__WEBPACK_IMPORTED_MODULE_0__.Pos(from.line + 1, 0)\n      }\n      sel.push(cm.markText(from, to, { css: `background-color: ${user.color}70;`, inclusiveRight: false, inclusiveLeft: false }))\n    }\n    // only render caret if not the complete last line was selected (in this case headpos.ch === 0)\n    const caret = sel.length > 0 && to === headpos && headpos.ch === 0 ? null : cm.setBookmark(headpos, { widget: caretEl, insertLeft: true })\n    cursors.set(clientId, { caret, sel, awCursor: cursor })\n  }\n}\n\nconst codemirrorCursorActivity = (y, cm, type, awareness) => {\n  const aw = awareness.getLocalState()\n  if (!cm.hasFocus() || aw == null || !cm.display.wrapper.ownerDocument.hasFocus()) {\n    return\n  }\n  const newAnchor = yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(type, cm.indexFromPos(cm.getCursor('anchor')))\n  const newHead = yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(type, cm.indexFromPos(cm.getCursor('head')))\n  let currentAnchor = null\n  let currentHead = null\n  if (aw.cursor != null) {\n    currentAnchor = yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromJSON(JSON.parse(aw.cursor.anchor))\n    currentHead = yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromJSON(JSON.parse(aw.cursor.head))\n  }\n  if (aw.cursor == null || !yjs__WEBPACK_IMPORTED_MODULE_3__.compareRelativePositions(currentAnchor, newAnchor) || !yjs__WEBPACK_IMPORTED_MODULE_3__.compareRelativePositions(currentHead, newHead)) {\n    awareness.setLocalStateField('cursor', {\n      anchor: JSON.stringify(newAnchor),\n      head: JSON.stringify(newHead)\n    })\n  }\n}\n\n/**\n * A binding that binds a YText to a CodeMirror editor.\n *\n * @example\n *   const ytext = ydocument.define('codemirror', Y.Text)\n *   const editor = new CodeMirror(document.querySelector('#container'), {\n *     mode: 'javascript',\n *     lineNumbers: true\n *   })\n *   const binding = new CodemirrorBinding(ytext, editor)\n *\n */\nclass CodemirrorBinding extends lib0_observable__WEBPACK_IMPORTED_MODULE_5__.Observable {\n  /**\n   * @param {Y.Text} textType\n   * @param {import('codemirror').Editor} codeMirror\n   * @param {any | null} [awareness]\n   * @param {{ yUndoManager?: Y.UndoManager }} [options]\n   */\n  constructor (textType, codeMirror, awareness = null, { yUndoManager = null } = {}) {\n    super()\n    const doc = textType.doc\n    const cmDoc = codeMirror.getDoc()\n    this.doc = doc\n    this.type = textType\n    this.cm = codeMirror\n    this.cmDoc = cmDoc\n    this.awareness = awareness || null\n    this.yUndoManager = yUndoManager\n    this._onStackItemAdded = ({ stackItem, changedParentTypes }) => {\n      // only store metadata if this type was affected\n      if (changedParentTypes.has(textType) && this._beforeChangeSelection) {\n        stackItem.meta.set(this, this._beforeChangeSelection)\n      }\n    }\n    this._onStackItemPopped = ({ stackItem }) => {\n      const sel = stackItem.meta.get(this)\n      if (sel) {\n        const anchor = yjs__WEBPACK_IMPORTED_MODULE_3__.createAbsolutePositionFromRelativePosition(sel.anchor, doc).index\n        const head = yjs__WEBPACK_IMPORTED_MODULE_3__.createAbsolutePositionFromRelativePosition(sel.head, doc).index\n        codeMirror.setSelection(codeMirror.posFromIndex(anchor), codeMirror.posFromIndex(head))\n        this._beforeChange()\n      }\n    }\n    if (yUndoManager) {\n      yUndoManager.trackedOrigins.add(this) // track changes performed by this editor binding\n      const editorUndo = cm => {\n        // Keymaps always start with an active operation.\n        // End the current operation so that the event is fired at the correct moment.\n        // @todo check cm.curOp in typeListener and endOperation always.\n        cm.endOperation()\n        yUndoManager.undo()\n        cm.startOperation()\n      }\n      const editorRedo = cm => {\n        cm.endOperation()\n        yUndoManager.redo()\n        cm.startOperation()\n      }\n      codeMirror.addKeyMap({\n        // pc\n        'Ctrl-Z': editorUndo,\n        'Shift-Ctrl-Z': editorRedo,\n        'Ctrl-Y': editorRedo,\n        // mac\n        'Cmd-Z': editorUndo,\n        'Shift-Cmd-Z': editorRedo,\n        'Cmd-Y': editorRedo\n      })\n\n      yUndoManager.on('stack-item-added', this._onStackItemAdded)\n      yUndoManager.on('stack-item-popped', this._onStackItemPopped)\n    }\n\n    this._mux = (0,lib0_mutex__WEBPACK_IMPORTED_MODULE_6__.createMutex)()\n    // set initial value\n    cmDoc.setValue(textType.toString())\n    // observe type and target\n    this._typeObserver = event => typeObserver(this, event)\n    this._targetObserver = (instance, changes) => {\n      if (instance.getDoc() === cmDoc) {\n        targetObserver(this, changes)\n      }\n    }\n    this._cursors = new Map()\n    this._changedCursors = new Set()\n    this._debounceCursorEvent = lib0_eventloop__WEBPACK_IMPORTED_MODULE_7__.createDebouncer(10)\n    this._awarenessListener = event => {\n      if (codeMirror.getDoc() !== cmDoc) {\n        return\n      }\n      const f = clientId => {\n        if (clientId !== doc.clientID) {\n          this._changedCursors.add(clientId)\n        }\n      }\n      event.added.forEach(f)\n      event.removed.forEach(f)\n      event.updated.forEach(f)\n      if (this._changedCursors.size > 0) {\n        this._debounceCursorEvent(() => {\n          this._changedCursors.forEach(clientId => {\n            updateRemoteSelection(doc, codeMirror, textType, this._cursors, clientId, awareness)\n          })\n          this._changedCursors.clear()\n        })\n      }\n    }\n    this._pendingCursorEvent = false\n    this._cursorListener = () => {\n      if (codeMirror.getDoc() === cmDoc) {\n        this._pendingCursorEvent = true\n        setTimeout(() => {\n          if (this._pendingCursorEvent) {\n            this._pendingCursorEvent = false\n            this.emit('cursorActivity', [codeMirror])\n          }\n        }, 0)\n      }\n    }\n    this.on('cursorActivity', () => {\n      codemirrorCursorActivity(doc, codeMirror, textType, awareness)\n    })\n    this._blurListeer = () => awareness.setLocalStateField('cursor', null)\n\n    textType.observe(this._typeObserver)\n    // @ts-ignore\n    codeMirror.on('changes', this._targetObserver)\n    /**\n     * @type {{ anchor: Y.RelativePosition, head: Y.RelativePosition } | null}\n     */\n    this._beforeChangeSelection = null\n    this._beforeChange = () => {\n      // update the the beforeChangeSelection that is stored befor each change to the editor (except when applying remote changes)\n      this._mux(() => {\n        // store the selection before the change is applied so we can restore it with the undo manager.\n        const anchor = yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(textType, codeMirror.indexFromPos(codeMirror.getCursor('anchor')))\n        const head = yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(textType, codeMirror.indexFromPos(codeMirror.getCursor('head')))\n        this._beforeChangeSelection = { anchor, head }\n      })\n    }\n    codeMirror.on('beforeChange', this._beforeChange)\n    if (awareness) {\n      codeMirror.on('swapDoc', this._blurListeer)\n      awareness.on('change', this._awarenessListener)\n      // @ts-ignore\n      codeMirror.on('cursorActivity', this._cursorListener)\n      codeMirror.on('blur', this._blurListeer)\n      codeMirror.on('focus', this._cursorListener)\n    }\n  }\n\n  destroy () {\n    this.type.unobserve(this._typeObserver)\n    this.cm.off('swapDoc', this._blurListeer)\n    // @ts-ignore\n    this.cm.off('changes', this._targetObserver)\n    this.cm.off('beforeChange', this._beforeChange)\n    // @ts-ignore\n    this.cm.off('cursorActivity', this._cursorListener)\n    this.cm.off('focus', this._cursorListener)\n    this.cm.off('blur', this._blurListeer)\n    if (this.awareness) {\n      this.awareness.off('change', this._awarenessListener)\n    }\n    if (this.yUndoManager) {\n      this.yUndoManager.off('stack-item-added', this._onStackItemAdded)\n      this.yUndoManager.off('stack-item-popped', this._onStackItemPopped)\n      this.yUndoManager.trackedOrigins.delete(this)\n    }\n    this.type = null\n    this.cm = null\n    this.cmDoc = null\n    super.destroy()\n  }\n}\n\nconst CodeMirrorBinding = CodemirrorBinding\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-codemirror/src/y-codemirror.js\n");

/***/ })

};
;